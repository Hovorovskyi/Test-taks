name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.12

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install poetry
        poetry config virtualenvs.create false
        poetry install --with dev --no-root

    - name: Debug Postgres Host
      run: |
        echo "Checking Postgres host (postgres)..."
        ping -c 3 postgres || echo "Postgres host not reachable"

    - name: Inspect Postgres Logs
      run: |
        docker logs $(docker ps -q --filter "ancestor=postgres:15") || echo "Unable to retrieve logs"

    - name: Inspect Docker Network
      run: |
        docker network inspect bridge
        docker ps -a

    - name: Wait for Postgres to be ready
      run: |
        until pg_isready -h localhost -p 5432 -U ${{ secrets.POSTGRES_USER }}; do
          echo "Waiting for Postgres to be ready...";
          sleep 1;
        done

    - name: Check Postgres Connection
      run: |
        for i in {1..20}; do
          PGPASSWORD=${{ secrets.POSTGRES_PASSWORD }} psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d ${{ secrets.POSTGRES_DB }} -c '\q' && break || sleep 5;
        done

    - name: Apply migrations
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
      run: |
        alembic upgrade head

    - name: Run tests
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
      run: |
        pytest --cov=app tests/
